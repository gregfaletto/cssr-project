setwd("~/Documents/GitHub/cssr/R")
source("cssr.R")
source("comps.R")
X_df <- datasets::mtcars
X_df_model <- stats::model.matrix(~ ., X_df)
X_df_model <- X_df_model[, colnames(X_df_model) != "(Intercept)"]
y_df <- rnorm(nrow(X_df))
# Get properly formatted clusters and prototypes for testing
format_clust_res <- formatClusters(clusters=1:3, p=ncol(X_df_model),
get_prototypes=TRUE, x=X_df_model, y=y_df)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- protolasso(X_df, y_df, 1:3)
colnames(X_df)
res
names(res)
res$selected_sets
res$selected_clusts_list
res$selected_clusts_list[[1]]
res$selected_clusts_list[[5]]
res$selected_sets
str(res$selected_sets[[8]])
prototypes
res$selected_sets[[1]] %in% prototypes
unlist(res$selected_sets) %in% prototypes
X_df_model
df2 <- X_df
df2$cyl <- as.factor(df2$cyl)
df2$vs <- as.factor(df2$vs)
df2$am <- as.factor(df2$am)
df2$gear <- as.factor(df2$gear)
df2$carb <- as.factor(df2$carb)
X_df_model <- stats::model.matrix(~ ., df2)
X_df_model <- X_df_model[, colnames(X_df_model) != "(Intercept)"]
X_df_model
?glmnet
x = matrix(rnorm(100 * 20), 100, 20)
y = rnorm(100)
fit1 = glmnet(x, y)
x = matrix(rnorm(100 * 20), 100, 20)
y = rnorm(100)
fit1 = glmnet::glmnet(x, y)
fit1$beta
str(fit1$beta)
x = matrix(rnorm(100 * 20), 100, 20)
y = rnorm(100)
fit1 = glmnet::glmnet(x, y, family="gaussian", nlambda=100)
str(fit1$beta)
class(fit1$beta)
str(class(fit1$beta))
dim(fit$beta)
dim(fit1$beta)
nrow(fit1$beta)
fit1 = glmnet::glmnet(x, y, family="gaussian", nlambda=60)
ncol(fit1$beta)
identical(class(fit1$beta), "dgCMatrix")
class(fit1$beta)
grepl("dgCMatrix", class(fit1$beta))
x <- matrix(stats::rnorm(15*11), nrow=15, ncol=11)
y <- stats::rnorm(15)
good_clusters <- list(red_cluster=1L:4L, green_cluster=5L:8L)
# Get properly formatted clusters and prototypes for testing
format_clust_res <- formatClusters(clusters=good_clusters, p=11,
clust_names=names(good_clusters),
get_prototypes=TRUE, x=x, y=y)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- protolasso(x, y, good_clusters, nlambda=60)
dim(res$beta)
dim(x)
res$beta
res$selected_sets
x <- matrix(stats::rnorm(15*11), nrow=15, ncol=11)
y <- stats::rnorm(15)
good_clusters <- list(red_cluster=1L:4L, green_cluster=5L:8L)
# Get properly formatted clusters and prototypes for testing
format_clust_res <- formatClusters(clusters=good_clusters, p=11,
clust_names=names(good_clusters),
get_prototypes=TRUE, x=x, y=y)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- protolasso(x, y, good_clusters, nlambda=60)
res$selected_sets
is.null(names(res$selected_sets[[5]]))
x <- matrix(stats::rnorm(15*11), nrow=15, ncol=11)
y <- stats::rnorm(15)
good_clusters <- list(red_cluster=1L:4L, green_cluster=5L:8L)
# Get properly formatted clusters and prototypes for testing
format_clust_res <- formatClusters(clusters=good_clusters, p=11,
clust_names=names(good_clusters),
get_prototypes=TRUE, x=x, y=y)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- clusterRepLasso(x, y, good_clusters, nlambda=60)
source("comps.R")
res <- clusterRepLasso(x, y, good_clusters, nlambda=60)
source("comps.R")
res <- clusterRepLasso(x, y, good_clusters, nlambda=60)
devtools::install("cssr/")
setwd("~/Documents/GitHub/cssr-project")
devtools::install("cssr/")
install.packages("glmnet")
devtools::test("cssr")
rm(list=ls())
source("cssr.R")
setwd("~/Documents/GitHub/cssr/R")
source("cssr.R")
source("comps.R")
x <- matrix(stats::rnorm(15*11), nrow=15, ncol=11)
y <- stats::rnorm(15)
good_clusters <- list(red_cluster=1L:4L, green_cluster=5L:8L)
# Get properly formatted clusters and prototypes for testing
format_clust_res <- formatClusters(clusters=good_clusters, p=11,
clust_names=names(good_clusters),
get_prototypes=TRUE, x=x, y=y)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- protolasso(x, y, good_clusters, nlambda=60)
nrow(res$beta)
11-7+2
X_df <- datasets::mtcars
X_df_model <- stats::model.matrix(~ ., X_df)
X_df_model <- X_df_model[, colnames(X_df_model) != "(Intercept)"]
y_df <- rnorm(nrow(X_df))
df2 <- X_df
df2$cyl <- as.factor(df2$cyl)
df2$vs <- as.factor(df2$vs)
df2$am <- as.factor(df2$am)
df2$gear <- as.factor(df2$gear)
df2$carb <- as.factor(df2$carb)
X_df_model <- stats::model.matrix(~ ., df2)
X_df_model <- X_df_model[, colnames(X_df_model) != "(Intercept)"]
format_clust_res <- formatClusters(clusters=4:6, p=ncol(X_df_model),
get_prototypes=TRUE, x=X_df_model, y=y_df)
prototypes <- format_clust_res$prototypes
clus_formatted <- format_clust_res$clusters
res <- clusterRepLasso(X_df_model, y_df, 4:6, nlambda=70)
res$selected_sets
colnames(X_df_model)
is.list(res$selected_sets)
identical(lengths(res$selected_sets),
unique(lengths(res$selected_sets)))
lengths(res$selected_sets)
unique(lengths(res$selected_sets)))
lengths <- lengths(res$selected_sets)
lenghts <- lenghts[lenghts != 0]
lengths <- lengths(res$selected_sets)
lenghts <- lenghts[lengths != 0]
lengths <- lengths(res$selected_sets)
lengths <- lengths[lengths != 0]
identical(lengths, unique(lengths))
setwd("~/Documents/GitHub/cssr-project")
devtools::install("cssr/")
devtools::test("cssr")
