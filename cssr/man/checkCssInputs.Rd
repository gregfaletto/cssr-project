% Generated by roxygen2: do not edit by hand
% Please edit documentation in create-cssr.Rmd.
\name{checkCssInputs}
\alias{checkCssInputs}
\title{Helper function to confirm that inputs to the function css are as expected,
and modify inputs if needed}
\usage{
checkCssInputs(
  X,
  y,
  lambda,
  clusters,
  fitfun,
  sampling_type,
  B,
  prop_feats_remove,
  train_inds,
  num_cores
)
}
\arguments{
\item{X}{An n x p numeric matrix (preferably) or a data.frame (which will
be coerced internally to a matrix by the function model.matrix) containing
p >= 2 features/predictors.}

\item{y}{The response; can be anything that takes the form of an
n-dimensional vector, with the ith entry corresponding to the ith row of X.
Typically (and for default fitfun = cssLasso), y should be an n-dimensional
numeric vector.}

\item{lambda}{A tuning parameter or set of tuning parameters that may be used
by the feature selection method fitfun. In the default case when
fitfun = cssLasso, lambda should be a numeric: the penalty to use for each
lasso fit. (css does not require lambda to be any particular object because
for a user-specified feature selection method fitfun, lambda can be an
arbitrary object. See the description of fitfun below.)}

\item{clusters}{A list of integer vectors; each vector should contain the
indices of a cluster of features (a subset of 1:p). (If there is only one
cluster, clusters can either be a list of length 1 or an integer vector.)
All of the provided clusters must be non-overlapping. Every feature not
appearing in any cluster will be assumed to be unclustered (that is, they
will be treated as if they are in a "cluster" containing only themselves). If
clusters is a list of length 0 (or a list only containing clusters of length
1), then css() returns the same results as stability selection (so the
returned feat_sel_mat will be identical to clus_sel_mat). Names for the
clusters will be needed later; any clusters that are not given names in the
provided list will be given names automatically by css. Default is list() (so
no clusters are specified).}

\item{fitfun}{A function; the feature selection function used on each
subsample by cluster stability selection. This can be any feature selection
method; the only requirement is that it accepts the arguments (and only the
arguments) X, y, and lambda and returns an integer vector that is a subset of
1:p. For example, fitfun could be best subset selection or forward stepwise
selection or LARS and lambda could be the desired model size; or fitfun could be the
elastic net and lambda could be a length-two vector specifying lambda and
alpha. Default is cssLasso, an implementation of lasso (relying on the R
package glmnet), where lambda must be a positive numeric specifying the L1
penalty for the lasso.}

\item{sampling_type}{A character vector; either "SS" or "MB". For "MB",
all B subsamples are drawn randomly (as proposed by Meinshausen and BÃ¼hlmann
2010). For "SS", in addition to these B subsamples, the B complementary pair
subsamples will be drawn as well (see Faletto and Bien 2022 or Shah and
Samworth 2013 for details). Default is "SS", and "MB" is not supported yet.}

\item{B}{Integer or numeric; the number of subsamples. Note: For
sampling.type=="MB" the total number of subsamples will be \code{B}; for
sampling_type="SS" the number of subsamples will be \code{2*B}. Default is 100
for sampling_type="MB" and 50 for sampling_type="SS".}

\item{prop_feats_remove}{Numeric; if prop_feats_remove is greater than 0,
then on each subsample, each feature is randomly dropped from the design
matrix that is provided to fitfun with probability prop_feats_remove
(independently across features). That is, in a typical subsample,
prop_feats_remove*p features will be dropped (though this number will vary).
This is similar in spirit (but distinct from) extended stability selection
(Beinrucker et. al. 2016); see their paper for some of the benefits of
dropping features (besides increasing computational speed and decreasing
memory requirements). For sampling_type="SS", the features dropped in
each complementary pair of subsamples are identical in order to ensure that
the theoretical guarantees of Faletto and Bien (2022) are retained within
each individual pair of subsamples. (Note that this feature is not
investigated either theoretically or in simulations by Faletto and Bien
2022). Must be between 0 and 1. Default is 0.}

\item{train_inds}{Optional; an integer or numeric vector containing the
indices of observations in X and y to set aside for model training by the
function getCssPreds after feature selection. (This will only work if y is
real-valued, because getCssPreds using ordinary least squares regression to
generate predictions.) If train_inds is not provided, all of the observations
in the provided data set will be used for feature selection.}

\item{num_cores}{Optional; an integer. If using parallel processing, the
number of cores to use for parallel processing (num_cores will be supplied
internally as the mc.cores argument of parallel::mclapply).}
}
\value{
A named list with the following elements: \item{feat_names}{A
character vector containing the column names of X (if the provided X
had column names). If the provided X did not have column names, feat_names
will be NA.} \item{X}{The provided X, converted to a matrix if it was
originally provided as a data.frame, and with feature names removed if they
had been provided.}\item{clusters}{A list of integer vectors; each vector
will contain the indices of a cluster of features. Any duplicated clusters
provided in the input will be removed.}
}
\description{
Helper function to confirm that inputs to the function css are as expected,
and modify inputs if needed
}
\author{
Gregory Faletto, Jacob Bien
}